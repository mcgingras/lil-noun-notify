import { useEffect, useState } from "react";
import { Transition } from "@headlessui/react";
import { XIcon, SparklesIcon } from "@heroicons/react/solid";
import { ImageData } from "@lilnouns/assets";
import Head from "next/head";

// components
import ProfileModal from "../components/ProfileModal";
import NounRender from "../components/NounRender";
import SelectModal from "../components/SelectModal";

export default function Home() {
  const [nouns, setNouns] = useState([]);
  const [activeNoun, setActiveNoun] = useState();
  const [head, setHead] = useState("-1");
  const [nounBody, setNounBody] = useState("-1");
  const [eyewear, setEyewear] = useState("-1");
  const [accessory, setAccessory] = useState("-1");

  // modal
  const [profileModalOpen, setProfileModalOpen] = useState(false);

  // transition states
  const [isUp, setUp] = useState(false);
  const [buttonUp, setButtonUp] = useState(true);

  // const {
  //   images: { bodies, heads, accessories, glasses },
  // } = ImageData;

  // const bodyNames = bodies.map((body) => body.filename.slice(5));
  // const headNames = heads.map((head) => head.filename.slice(5));
  // const glassesNames = glasses.map((glasses) => glasses.filename.slice(8));
  // const accessoryNames = accessories.map((accessory) =>
  //   accessory.filename.slice(10)
  // );

  useEffect(() => {
    const getNouns = async () => {
      const fetchNounsResponse = await fetch("/api/getNouns", {
        method: "POST",
        body: JSON.stringify({
          head: head.localId,
          body: nounBody.localId,
          glasses: eyewear.localId,
          accessory: accessory.localId,
        }),
      });

      const fetchNounsJson = await fetchNounsResponse.json();
      setNouns(fetchNounsJson.nouns);
    };
    getNouns();
  }, [head, nounBody, eyewear, accessory]);

  console.log(head);

  return (
    <div>
      <Head>
        <title>Lil Nouns Trait Finder</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-full h-screen bg-[#DFD7D5] flex flex-col">
        <ProfileModal
          isOpen={profileModalOpen}
          setIsOpen={setProfileModalOpen}
          noun={activeNoun}
        />

        <section className="px-6 lg:px-12 h-full flex-grow flex flex-col">
          <header className="pt-6 lg:pt-12 lg:flex lg:flex-row lg:justify-between">
            <img
              src="/ln.svg"
              className="mb-4 h-[40px] ml-auto mr-auto lg:h-[58px] lg:ml-0 lg:mr-0 lg:mb-0"
              alt="current noun"
            />
            <div className="flex flex-row space-x-4 justify-between">
              <SelectModal type="HEAD" selected={head} setSelected={setHead} />
              <SelectModal
                type="BODY"
                selected={nounBody}
                setSelected={setNounBody}
              />
              <SelectModal
                type="GLASSES"
                selected={eyewear}
                setSelected={setEyewear}
              />
              <SelectModal
                type="ACCESSORY"
                selected={accessory}
                setSelected={setAccessory}
              />
            </div>
          </header>

          <div className="grow">
            {head === "-1" &&
            nounBody === "-1" &&
            eyewear === "-1" &&
            accessory === "-1" ? (
              <div className="h-full flex items-center justify-center">
                <div>
                  <h3 className="text-4xl font-bold mx-auto text-center londrina-regular text-gray-900">
                    No traits selected!
                  </h3>
                  <p className="block mx-auto max-w-[400px] text-center text-gray-700 mt-1">
                    Use the selections above to build a lil noun and see which
                    lil nouns have already been born with those traits!
                  </p>
                </div>
              </div>
            ) : (
              <NounRender
                className="h-full mx-auto"
                seed={{
                  head: head.localId,
                  body: nounBody.localId,
                  glasses: eyewear.localId,
                  accessory: accessory.localId,
                }}
              />
            )}
          </div>

          <Transition
            show={buttonUp}
            enter="transition ease-in-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="transition ease-in-out duration-300"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
            afterLeave={() => {
              setUp(true);
              // document.getElementById("bottom");
              // setTimeout(() => {
              //   bottom.scrollIntoView();
              // }, 700);
            }}
          >
            <button
              className="absolute right-8 bottom-8 bg-gray-900 text-white rounded-full p-3 flex items-center"
              onClick={() => {
                setButtonUp(false);
              }}
            >
              <span className="mx-1">See {nouns.length} results</span>
            </button>
          </Transition>
        </section>

        <Transition
          show={isUp}
          enter="transform transition-all ease-in-out duration-500 sm:duration-700"
          enterFrom="h-0"
          enterTo="h-[calc(100vh-200px)]"
          leave="transform transition-all ease-in-out duration-500 sm:duration-700"
          leaveFrom="h-full"
          leaveTo="h-0"
          afterLeave={() => setButtonUp(true)}
        >
          <div className="bg-white w-full h-full rounded-t-[3rem] p-8 relative">
            <button
              className="absolute right-8 top-[-5rem] bg-gray-900 text-white rounded-full p-3 flex items-center"
              onClick={() => {
                setUp(false);
              }}
            >
              <span className="mx-1">Hide results</span>
            </button>
            {/* <div className="flex flex-row space-x-8"> */}
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-8 h-full overflow-scroll">
              {nouns.length === 0 && (
                <span className="h-[200px] w-full text-gray-400 text-center londrina-regular text-5xl flex items-center justify-center col-span-2 md:col-span-4 lg:col-span-8">
                  No lil nouns have been born with these traits yet :(
                </span>
              )}
              {nouns.map((noun, idx) => {
                return (
                  <div
                    key={idx}
                    onClick={() => {
                      setActiveNoun(noun);
                      setProfileModalOpen(true);
                    }}
                  >
                    <NounRender seed={noun.seed} className="rounded-lg" />
                  </div>
                );
              })}
              {/* {nouns.length >= 13 && (
                  <div className="bg-gray-100 text-gray-400 text-3xl flex justify-center items-center londrina-regular cursor-pointer">
                    Next
                  </div>
                )} */}
            </div>
          </div>
        </Transition>
        <span id="bottom"></span>
      </main>
    </div>
  );
}
