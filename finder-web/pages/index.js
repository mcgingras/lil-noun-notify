import { useEffect, useState } from "react";
import { FloatingLabel, Form } from "react-bootstrap";
import { ImageData } from "@lilnouns/assets";
import Head from "next/head";

// hooks
import useDiscordAuth from "../hooks/useDiscordAuth";

function SVG({ b64, className }) {
  return <img className={className} src={`data:image/svg+xml;base64,${b64}`} />;
}

export default function Home() {
  const [b64, setb64] = useState();
  const [head, setHead] = useState(1);
  const [nounBody, setNounBody] = useState(1);
  const [eyewear, setEyewear] = useState(1);
  const [accessory, setAccessory] = useState(1);
  const { authorization, onOpen } = useDiscordAuth("identify");

  const {
    images: { bodies, heads, accessories, glasses },
  } = ImageData;

  const bodyNames = bodies.map((body) => body.filename.slice(5));
  const headNames = heads.map((head) => head.filename.slice(5));
  const glassesNames = glasses.map((glasses) => glasses.filename.slice(8));
  const accessoryNames = accessories.map((accessory) =>
    accessory.filename.slice(10)
  );

  useEffect(() => {
    const _ = async () => {
      const res = await fetch("/api/getNoun", {
        method: "POST",
        body: JSON.stringify({
          background: 1,
          head: head,
          body: nounBody,
          glasses: eyewear,
          accessory: accessory,
        }),
      });
      const body = await res.json();
      setb64(body.response);
    };
    _();
  }, [head, nounBody, eyewear, accessory]);

  return (
    <div>
      <Head>
        <title>Noun Trait Finder</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-full h-screen bg-[#DFD7D5] flex flex-col">
        <section className="px-12 h-full flex-grow flex flex-col">
          <header className="pt-12 flex flex-row justify-between">
            <img src="/lntf_logo.svg" />
            <div className="flex flex-row space-x-4">
              <div className="w-[200px]">
                <FloatingLabel controlId="floatingSelect" label="Head">
                  <Form.Select
                    className="border-0"
                    aria-label="Floating label select example"
                    onChange={(e) => setHead(e.target.value)}
                  >
                    {headNames.map((name, idx) => (
                      <option key={idx} value={idx}>
                        {name}
                      </option>
                    ))}
                  </Form.Select>
                </FloatingLabel>
              </div>

              <div className="w-[200px]">
                <FloatingLabel controlId="floatingSelect" label="Body">
                  <Form.Select
                    className="border-0"
                    aria-label="Floating label select example"
                    onChange={(e) => setNounBody(e.target.value)}
                  >
                    {bodyNames.map((name, idx) => (
                      <option key={idx} value={idx}>
                        {name}
                      </option>
                    ))}
                  </Form.Select>
                </FloatingLabel>
              </div>

              <div className="w-[200px]">
                <FloatingLabel controlId="floatingSelect" label="Glasses">
                  <Form.Select
                    className="border-0"
                    aria-label="Floating label select example"
                    onChange={(e) => setEyewear(e.target.value)}
                  >
                    {glassesNames.map((name, idx) => (
                      <option key={idx} value={idx}>
                        {name}
                      </option>
                    ))}
                  </Form.Select>
                </FloatingLabel>
              </div>

              <div className="w-[200px]">
                <FloatingLabel controlId="floatingSelect" label="Accessories">
                  <Form.Select
                    className="border-0"
                    aria-label="Floating label select example"
                    onChange={(e) => setAccessory(e.target.value)}
                  >
                    {accessoryNames.map((name, idx) => (
                      <option key={idx} value={idx}>
                        {name}
                      </option>
                    ))}
                  </Form.Select>
                </FloatingLabel>
              </div>
              {/* <button
                className="bg-[#6A79F1] self-start px-4 text-white rounded"
                onClick={() => {
                  onOpen();
                }}
              >
                Auth
              </button> */}
            </div>
          </header>

          <div className="flex-grow">
            <SVG b64={b64} className="h-full mx-auto" />
          </div>
        </section>
        <div className="bg-white w-full h-[200px] rounded-t-[3rem]"></div>
      </main>
    </div>
  );
}
